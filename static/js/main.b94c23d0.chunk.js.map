{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","console","log","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEe,SAASA,EAAT,GAAgE,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAO9D,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,cACI,qBAAKE,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBACIF,UAAU,OACVC,IAAI,iBACJE,QAbI,WACXJ,GACDF,EAAaD,IAYLM,IAAI,mBCbxB,IAAME,EAAa,CACjB,CAAEH,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,kBAAmBI,SAAS,GACnC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,mBAAoBI,SAAS,IA6FvBC,MA1Ff,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KAGMC,EAAe,WACnB,IAAMC,EAAgB,UAAId,EAAeA,GACtCe,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAA1B,GAAI,kCAAUA,GAAV,IAAgB2B,GAAIH,KAAKC,cAGpCR,EAAa,MACbE,EAAa,MAEbN,EAASS,GACTP,EAAS,IAILd,EAAe,SAACD,GAChBgB,GAAcA,EAAUW,KAAO3B,EAAK2B,GACtCR,EAAanB,GAEbiB,EAAajB,IAKjB4B,qBAAU,WACJZ,GAAaE,IACfE,GAAY,GACRJ,EAAUX,MAAQa,EAAUb,KAC9BQ,GAAS,SAAAgB,GACP,OAAOA,EAAUH,KAAI,SAAA1B,GACnB,OAAIA,EAAKK,MAAQW,EAAUX,IAClB,2BAAKL,GAAZ,IAAkBS,SAAS,IACjBT,QAGhB8B,KAGAC,YAAW,kBAAMD,MAAa,QAGjC,CAACd,EAAWE,IAEfc,QAAQC,IAAIrB,GAGZ,IAAMkB,EAAY,WAChBb,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAmB,GAAS,OAAIA,EAAY,KAClCd,GAAY,IAQd,OAJAQ,qBAAU,WACRP,MACC,IAGD,sBAAKjB,UAAU,MAAf,UACE,kDACA,wCACA,yDACA,6DACA,sBACA,wBAAQG,QAASc,EAAjB,sBAEA,qBAAKjB,UAAU,YAAf,SACGQ,EAAMc,KAAI,SAAA1B,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EAEdC,QAASF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC1DN,SAAUA,GALLH,EAAK2B,SAQhB,wCAAWb,SC7FjBqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b94c23d0.chunk.js","sourcesContent":["import './SingleCard.css'\r\n\r\nexport default function SingleCard({ card, handleChoice, flipped, disabled }) {\r\n    const handleClick = () => {\r\n        if (!disabled) {\r\n            handleChoice(card)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='card'>\r\n            <div className={flipped ? 'flipped' : ''}> {/*if true assigns the 'flipped' class name*/}\r\n                <img className=\"front\" src={card.src} alt=\"card front\" />\r\n                <img\r\n                    className=\"back\"\r\n                    src=\"/img/cover.png\"\r\n                    onClick={handleClick}\r\n                    alt=\"card back\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\nimport './App.css'\nimport SingleCard from './components/SingleCard'\n\nconst cardImages = [\n  { src: \"/img/potion-1.png\", matched: false },\n  { src: \"/img/helmet-1.png\", matched: false },\n  { src: \"/img/ring-1.png\", matched: false },\n  { src: \"/img/scroll-1.png\", matched: false },\n  { src: \"/img/shield-1.png\", matched: false },\n  { src: \"/img/sword-1.png\", matched: false }\n]\n\nfunction App() {\n  const [cards, setCards] = useState([]) //initially cards is an empty array, hence we don't see them on refresh, we use another useEffect with shuffleCards function to display them\n  const [turns, setTurns] = useState(0)\n  const [choiceOne, setChoiceOne] = useState(null)\n  const [choiceTwo, setChoiceTwo] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n\n  //shuffling cards\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages] //we need two of each cards so total 12 cards\n      .sort(() => Math.random() - 0.5) //generating +ve or -ve number to sort a before b which is default for -ve and other way around for +ve\n      .map(card => ({ ...card, id: Math.random() })) //assigning random id to each card\n\n    //making sure choices are set to null\n    setChoiceOne(null)\n    setChoiceTwo(null)\n\n    setCards(shuffledCards)\n    setTurns(0) //everytime shuffleCards() is called, it will be for a new game so the turns reset to 0\n  }\n\n  //handling choice and preventing double click bug\n  const handleChoice = (card) => {\n    if (choiceOne && (choiceOne.id !== card.id)) {\n      setChoiceTwo(card)\n    } else {\n      setChoiceOne(card)\n    }\n  }\n\n  //comparing two selected cards and updating 'matched' property\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true) //disables selection for some time after the 2 choices have been made\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) //we can also write choiceTwo.src instead as they both have equal values\n              return { ...card, matched: true }\n            else return card\n          })\n        })\n        resetTurn()\n      }\n      else {\n        setTimeout(() => resetTurn(), 1000) //adds delay on reset after match fail, 1000 milliseconds = 1 second, it's an inbuilt JS method\n      }\n    }\n  }, [choiceOne, choiceTwo])\n\n  console.log(cards)\n\n  //resetting choices and handling turns\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurns => prevTurns + 1)\n    setDisabled(false)\n  }\n\n  //starting a new game automatically\n  useEffect(() => {\n    shuffleCards()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Pair Match</h1>\n      <h2>Rules:</h2>\n      <p>-Click to flip the cards</p>\n      <p>-Find all the matching pairs</p>\n      <p></p>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className='card-grid'>\n        {cards.map(card => (\n          <SingleCard\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            //keeping a card flipped\n            flipped={card === choiceOne || card === choiceTwo || card.matched} //adding flipped prop to a card during iteration, it will either be true or false\n            disabled={disabled} />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}